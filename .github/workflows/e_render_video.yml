name: Render Video

on:
  workflow_call:
    inputs:
      images_zip:
        description: "Archive des images (ZIP)"
        required: false
        type: string
        default: outputs/images.zip
      audio_path:
        description: "Chemin du fichier audio (mp3/wav)"
        required: false
        type: string
        default: work/audio.mp3
      min_duration_sec:
        description: "Durée minimale de la vidéo (s)"
        required: false
        type: number
        default: 65
      target_res:
        description: "Résolution cible LxH (ex 720x1280)"
        required: false
        type: string
        default: 720x1280
      fps:
        description: "Images/seconde"
        required: false
        type: number
        default: 25
    outputs:
      final_video:
        description: "Chemin de la vidéo rendue"
        value: ${{ jobs.render.outputs.final_video }}

jobs:
  render:
    runs-on: ubuntu-latest
    outputs:
      final_video: ${{ steps.set_out.outputs.final_video }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Prepare folders
        run: |
          set -euo pipefail
          mkdir -p work build outputs

      - name: Unzip images
        run: |
          set -euo pipefail
          ZIP="${{ inputs.images_zip }}"
          if [ ! -f "$ZIP" ]; then
            echo "Archive d'images introuvable: $ZIP" >&2
            exit 1
          fi
          rm -rf work/images
          mkdir -p work/images
          unzip -qq "$ZIP" -d work/images

      - name: Normalize images to target resolution
        run: |
          set -euo pipefail
          RES="${{ inputs.target_res }}"
          shopt -s nullglob
          rm -f build/*.png
          for img in work/images/*.png work/images/*.jpg work/images/*.jpeg; do
            [ -f "$img" ] || continue
            base="$(basename "$img")"
            out="build/${base%.*}.png"
            ffmpeg -y -i "$img" \
              -vf "scale=${RES}:force_original_aspect_ratio=decrease,pad=${RES}:(ow-iw)/2:(oh-ih)/2" \
              "$out"
          done
          echo "== DEBUG images normalisées =="
          ls -lh build

      - name: Build filelist for concat
        id: list
        run: |
          set -euo pipefail
          AUDIO="${{ inputs.audio_path }}"
          if [ ! -f "$AUDIO" ]; then
            echo "Fichier audio introuvable: $AUDIO" >&2
            exit 1
          fi

          IMAGE_COUNT=$(ls build/*.png 2>/dev/null | wc -l)
          if [ "$IMAGE_COUNT" -eq 0 ]; then
            echo "Aucune image dans build/" >&2
            exit 1
          fi

          AUDIO_DUR=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "$AUDIO" | awk '{print int($1)}')
          TARGET=${{ inputs.min_duration_sec }}
          if [ "$AUDIO_DUR" -gt "$TARGET" ]; then TARGET="$AUDIO_DUR"; fi
          echo "Durée audio=${AUDIO_DUR}s, cible=${TARGET}s"

          DURATION_PER_IMAGE=$(awk "BEGIN {printf \"%.2f\", $TARGET / $IMAGE_COUNT}")

          FILELIST="build/filelist.txt"
          : > "$FILELIST"
          for img in $(ls build/*.png | sort); do
            echo "file '$(readlink -f "$img")'" >> "$FILELIST"
            echo "duration $DURATION_PER_IMAGE" >> "$FILELIST"
          done
          LAST=$(ls build/*.png | sort | tail -n 1)
          echo "file '$(readlink -f "$LAST")'" >> "$FILELIST"

          echo "filelist_path=$FILELIST" >> "$GITHUB_OUTPUT"
          echo "audio_path=$AUDIO" >> "$GITHUB_OUTPUT"

      - name: Render slideshow + audio
        run: |
          set -euo pipefail
          FILELIST="${{ steps.list.outputs.filelist_path }}"
          AUDIO="${{ steps.list.outputs.audio_path }}"
          FPS="${{ inputs.fps }}"
          OUT="outputs/final.mp4"

          ffmpeg -y -f concat -safe 0 -i "$FILELIST" \
                 -i "$AUDIO" -r "$FPS" \
                 -c:v libx264 -pix_fmt yuv420p -c:a aac \
                 -shortest "$OUT"

      - name: Set output path
        id: set_out
        run: echo "final_video=outputs/final.mp4" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: final-video
          path: outputs/final.mp4