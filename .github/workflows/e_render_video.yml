name: Render Video

on:
  workflow_dispatch:
  workflow_call:

jobs:
  render:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Installer FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Préparer les dossiers
        run: |
          set -euo pipefail
          mkdir -p work build outputs

      - name: Décompresser images
        run: |
          set -euo pipefail
          unzip outputs/images.zip -d work/images

      - name: Déboguer les fichiers extraits
        run: |
          set -euo pipefail
          ls -lh work/images

      - name: Normaliser les images (720x1280)
        run: |
          set -euo pipefail
          for img in work/images/*.png; do
            ffmpeg -y -i "$img" -vf "scale=720:1280:force_original_aspect_ratio=decrease,pad=720:1280:(ow-iw)/2:(oh-ih)/2" "build/$(basename "$img")"
          done

      - name: Déboguer images normalisées
        run: |
          set -euo pipefail
          ls -lh build

      - name: Générer filelist.txt
        id: filelist
        run: |
          set -euo pipefail
          IMAGE_COUNT=$(ls build/*.png | wc -l)
          AUDIO_FILE="work/audio.mp3"
          
          # Vérification existence audio
          if [ ! -f "$AUDIO_FILE" ]; then
            echo "Erreur: Le fichier audio $AUDIO_FILE est introuvable."
            exit 1
          fi

          # Durée audio
          AUDIO_DURATION=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "$AUDIO_FILE" | awk '{print int($1)}')
          
          # Durée cible minimum TikTok = 65s
          TARGET_DURATION=65
          if [[ "$AUDIO_DURATION" -gt "$TARGET_DURATION" ]]; then
            TARGET_DURATION=$AUDIO_DURATION
          fi

          echo "Durée audio=$AUDIO_DURATION, cible=$TARGET_DURATION"

          # Durée par image
          DURATION_PER_IMAGE=$(awk "BEGIN {print $TARGET_DURATION / $IMAGE_COUNT}")
          echo "Durée par image=$DURATION_PER_IMAGE (N=$IMAGE_COUNT)"

          FILELIST="build/filelist.txt"
          : > "$FILELIST"   # CORRECTION ShellCheck

          for img in $(ls build/*.png | sort); do
            echo "file '$PWD/$img'" >> "$FILELIST"
            echo "duration $DURATION_PER_IMAGE" >> "$FILELIST"
          done

          # Dernière image répétée pour éviter coupure
          LAST_IMG=$(ls build/*.png | sort | tail -n 1)
          echo "file '$PWD/$LAST_IMG'" >> "$FILELIST"

          echo "filelist_path=$FILELIST" >> "$GITHUB_OUTPUT"

          echo "=== filelist.txt ==="
          cat "$FILELIST"

      - name: Générer vidéo finale
        run: |
          set -euo pipefail
          FILELIST="${{ steps.filelist.outputs.filelist_path }}"
          AUDIO_FILE="work/audio.mp3"
          OUTPUT="outputs/final.mp4"

          echo "Début du rendu vidéo avec FFmpeg..."
          ffmpeg -y -f concat -safe 0 -i "$FILELIST" -i "$AUDIO_FILE" \
            -c:v libx264 -pix_fmt yuv420p -c:a aac -shortest "$OUTPUT"

          echo "Vidéo finale générée : $OUTPUT"

      - name: Upload artefact
        uses: actions/upload-artifact@v3
        with:
          name: final-video
          path: outputs/final.mp4