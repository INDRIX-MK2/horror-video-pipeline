name: Horror TikTok Builder (no-heredoc, title+story+cta)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      MANIFEST_URL: ${{ secrets.MANIFEST_URL }}
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ensure folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p story audio selected_media subs final_video manifests

      # 1) Générer Titre + Histoire + CTA (ton script existant)
      - name: Generate title + story + cta
        shell: bash
        run: |
          set -euo pipefail
          python scripts/generate_story.py \
            --system "Tu écris un script court et immersif d'horreur en français. Pas de didascalies (intro, scène, narrateur, CTA...). Raconte uniquement l'histoire." \
            --user "Écris un script TikTok de 180 à 200 mots. Structure : hook (10s), développement (45s), conclusion avec CTA (10s). Thème : horreur atmosphérique, manoir, pluie, bruits métalliques. Style concis, phrases courtes, sans grossièretés." \
            --title-out story/title.txt \
            --story-out story/story.txt \
            --cta-out   story/cta.txt
          echo "[generate_story] titre -> story/title.txt | histoire -> story/story.txt | cta -> story/cta.txt"
          [ -s story/title.txt ] || { echo "title.txt manquant/vide"; exit 1; }
          [ -s story/story.txt ] || { echo "story.txt manquant/vide"; exit 1; }
          [ -s story/cta.txt ]   || { echo "cta.txt manquant/vide"; exit 1; }

      # 2) TTS ElevenLabs (CORRECTIF: plus de --transcript, on passe --title-file/--story-file/--cta-file)
      - name: Synthesize voice (title + 1s + story + 1s + cta)
        shell: bash
        run: |
          set -euo pipefail
          python scripts/voice_elevenlabs.py \
            --title-file story/title.txt \
            --story-file story/story.txt \
            --cta-file   story/cta.txt \
            --gap-title 1.0 \
            --gap-cta   1.0 \
            --out       audio/voice.wav \
            --list-file audio/voice.txt
          [ -s audio/voice.wav ] || { echo "voice.wav manquant"; exit 1; }
          [ -s audio/timeline.json ] || { echo "timeline.json manquant"; exit 1; }

      # 3) Sélection/merge vidéos selon MANIFEST_URL (inchangé)
      - name: Select & merge background clips
        shell: bash
        run: |
          set -euo pipefail
          : "${MANIFEST_URL:?MANIFEST_URL manquant}"
          python scripts/select_and_merge.py \
            --manifest manifests/horreur.txt \
            --audio audio/voice.wav \
            --out selected_media/merged.mp4
          [ -s selected_media/merged.mp4 ] || { echo "merged.mp4 manquant"; exit 1; }

      # 5) Render final (fondu noir + subs + audio)
      - name: Render final video
        shell: bash
        run: |
          set -euo pipefail
          python scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --subs  subs/captions.ass \
            --output final_video/${OUT_NAME}
          [ -s "final_video/${OUT_NAME}" ] || { echo "final video manquante"; exit 1; }

      # 6) Upload Dropbox (refresh-token ONLY)
      - name: Upload to Dropbox
        shell: bash
        run: |
          set -euo pipefail
          python scripts/dropbox_upload.py \
            --file "final_video/${OUT_NAME}" \
            --remote-dir "/horror" \
            --out-link "final_video/dropbox_link.txt"
          [ -s final_video/dropbox_link.txt ] || { echo "Lien Dropbox manquant"; exit 1; }

      - name: Upload artifact (final video + link)
        uses: actions/upload-artifact@v4
        with:
            name: final_assets
            path: |
              final_video/
              audio/timeline.json
              subs/captions.ass