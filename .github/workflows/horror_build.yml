name: Horror TikTok Builder (no-heredoc, intro+outro)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"
  OPENAI_MODEL: "gpt-4o"
  OPENAI_TEMPERATURE: "1"
  USER_PROMPT: "Écris un script TikTok immerssif de 180 à 200 mots (65-75s). Structure : hook (10s), développement (45s), conclusion avec CTA (10s). Thème : horreur atmosphérique. Style concis, phrases courtes, sans grossièretés."
  SYSTEM_PROMPT: "Tu écris un script court et immersif d'horreur en français. N'inclus AUCUNE didascalie (intro, scène, narrateur, CTA, etc.). Raconte seulement l'histoire."

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      MANIFEST_URL: ${{ secrets.MANIFEST_URL }}
      DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install ffmpeg and fonts
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Pip install
        run: |
          set -euo pipefail
          python -V
          pip install -r requirements.txt

      - name: Generate Story (title + story)
        env:
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
          OPENAI_TEMPERATURE: ${{ env.OPENAI_TEMPERATURE }}
          USER_PROMPT: ${{ env.USER_PROMPT }}
          SYSTEM_PROMPT: ${{ env.SYSTEM_PROMPT }}
        run: |
          set -euo pipefail
          python scripts/generate_story.py
          test -s story/story.txt
          # title.txt est optionnel (le renderer a un fallback), mais on le garde si généré
          if [ -f story/title.txt ]; then
            [ -s story/title.txt ]
          fi

      - name: Synthesize Voice
        run: |
          set -euo pipefail
          mkdir -p audio
          python scripts/voice_elevenlabs.py --transcript story/story.txt --out audio/voice.wav
          test -s audio/voice.wav

      - name: Build ASS subtitles (scripts/build_ass.py)
        run: |
          set -euo pipefail
          mkdir -p subs
          python scripts/build_ass.py --transcript story/story.txt --audio audio/voice.wav --out subs/captions.ass
          test -s subs/captions.ass


      - name: Select & Merge Clips (cover length = voice length)
        run: |
          set -euo pipefail
          mkdir -p selected_media
          python scripts/select_and_merge.py --manifest manifests/horreur.txt --audio audio/voice.wav --out selected_media/merged.mp4
          test -s selected_media/merged.mp4

      - name: Render Final (effects + subs + intro/outro)
        run: |
          set -euo pipefail
          mkdir -p final_video
          python scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --subs subs/captions.ass \
            --story story/story.txt \
            --title story/title.txt \
            --output final_video/${OUT_NAME}
          test -s final_video/${OUT_NAME}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: final_video
          path: |
            final_video/${{ env.OUT_NAME }}
            story/story.txt
            story/title.txt
            subs/captions.ass
            selected_media/merged.mp4

      - name: Upload to Dropbox (if token present)
        if: ${{ env.DROPBOX_ACCESS_TOKEN != '' }}
        run: |
          set -euo pipefail
          python scripts/dropbox_upload.py --file final_video/${OUT_NAME}