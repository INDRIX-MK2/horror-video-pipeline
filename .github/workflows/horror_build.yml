name: Horror TikTok Builder (no-heredoc, title+story+cta)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show Python & FFmpeg versions (pre)
        run: |
          python3 -V || true
          ffmpeg -version || true

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install FFmpeg
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Ensure folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p story audio selected_media subs final_video manifests

      # ===============================
      # 1) Génération Titre / Histoire / CTA
      # ===============================
      - name: Generate title + story + cta
        shell: bash
        run: |
          set -euo pipefail
          python scripts/generate_story.py
          echo "[generate_story] titre -> story/title.txt | histoire -> story/story.txt | cta -> story/cta.txt"
          [ -s story/title.txt ] || { echo "title.txt manquant/vide"; exit 1; }
          [ -s story/story.txt ] || { echo "story.txt manquant/vide"; exit 1; }
          [ -s story/cta.txt ] || { echo "cta.txt manquant/vide"; exit 1; }

      # ===============================
      # 2) TTS ElevenLabs (titre + histoire + cta) puis concat
      # ===============================
      - name: TTS ElevenLabs (title)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p audio
          python scripts/voice_elevenlabs.py --transcript story/title.txt --out audio/title.wav
          [ -s audio/title.wav ] || { echo "title.wav manquant"; exit 1; }

      - name: TTS ElevenLabs (story)
        shell: bash
        run: |
          set -euo pipefail
          python scripts/voice_elevenlabs.py --transcript story/story.txt --out audio/story.wav
          [ -s audio/story.wav ] || { echo "story.wav manquant"; exit 1; }

      - name: TTS ElevenLabs (cta)
        shell: bash
        run: |
          set -euo pipefail
          python scripts/voice_elevenlabs.py --transcript story/cta.txt --out audio/cta.wav
          [ -s audio/cta.wav ] || { echo "cta.wav manquant"; exit 1; }

      - name: Concat TTS (title + 1s silence + story + 1s silence + cta) => voice.wav
        shell: bash
        run: |
          set -euo pipefail
          # Silences de 1s
          ffmpeg -nostdin -y -f lavfi -i anullsrc=r=48000:cl=stereo -t 1 audio/silence1.wav
          cp audio/silence1.wav audio/silence2.wav
          # Liste pour concat
          printf "file '%s'\n" "audio/title.wav"        >  audio/voice.txt
          printf "file '%s'\n" "audio/silence1.wav"    >> audio/voice.txt
          printf "file '%s'\n" "audio/story.wav"       >> audio/voice.txt
          printf "file '%s'\n" "audio/silence2.wav"    >> audio/voice.txt
          printf "file '%s'\n" "audio/cta.wav"         >> audio/voice.txt
          ffmpeg -nostdin -y -f concat -safe 0 -i audio/voice.txt -c copy audio/voice.wav
          [ -s audio/voice.wav ] || { echo "voice.wav manquant"; exit 1; }

      # ===============================
      # 3) Sous-titres (ASS) — centre (=5), jaune — story uniquement
      # (Le titre et CTA sont incrustés par render_final.py via drawtext)
      # ===============================
      - name: Build subtitles (ASS) from story
        shell: bash
        run: |
          set -euo pipefail
          # On synchronise les sous-titres sur la narration d'histoire uniquement :
          #   => on passe l'audio 'audio/story.wav' au builder
          python scripts/build_ass.py \
            --transcript story/story.txt \
            --audio audio/story.wav \
            --out subs/captions.ass \
            --align 5 \
            --colour "&H0000FFFF" \
            --max-words 4 \
            --max-lines 3 \
            --lead 0 \
            --speed 1
          [ -s subs/captions.ass ] || { echo "captions.ass manquant"; exit 1; }

      # ===============================
      # 4) Sélection / Merge vidéo depuis manifest local (URLs)
      # ===============================
      - name: Select and merge clips (from manifest)
        shell: bash
        run: |
          set -euo pipefail
          [ -s manifests/horreur.txt ] || { echo "manifests/horreur.txt manquant/vide"; exit 1; }
          python scripts/select_and_merge.py \
            --manifest manifests/horreur.txt \
            --audio audio/voice.wav \
            --out selected_media/merged.mp4
          [ -s selected_media/merged.mp4 ] || { echo "merged.mp4 manquant"; exit 1; }

      # ===============================
      # 5) Rendu final (fondus, sous-titres, titre/CTA centrés)
      # ===============================
      - name: Render final
        shell: bash
        run: |
          set -euo pipefail
          python scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --subs subs/captions.ass \
            --title-file story/title.txt \
            --cta-file story/cta.txt \
            --output final_video/${OUT_NAME}
          [ -s final_video/${OUT_NAME} ] || { echo "final video manquante"; exit 1; }

      # ===============================
      # 6) Upload Dropbox (refresh token ONLY)
      # ===============================
      - name: Upload to Dropbox (refresh-token flow)
        shell: bash
        run: |
          set -euo pipefail
          python scripts/dropbox_upload.py \
            --file final_video/${OUT_NAME} \
            --remote-dir "/horror" \
            --out-link final_video/dropbox_link.txt
          [ -s final_video/dropbox_link.txt ] || { echo "dropbox_link.txt manquant"; exit 1; }
          echo "Dropbox link:"
          cat final_video/dropbox_link.txt

      # ===============================
      # 7) Artifacts
      # ===============================
      - name: Upload artifacts (video + link + logs)
        uses: actions/upload-artifact@v4
        with:
          name: build_outputs
          path: |
            story/
            audio/
            subs/
            selected_media/
            final_video/