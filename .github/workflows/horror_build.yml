name: Horror TikTok Builder (no-heredoc, SRT/ASS, voice-length-driven)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"
  # Prompts (gérés côté script generate_story.py)
  SYSTEM_PROMPT: 'Tu écris un script court et ultra immersif d''horreur en français. N''inclue AUCUNE didascalie (intro, scène, narrateur, CTA, etc.). Raconte seulement l''histoire.'
  USER_PROMPT: 'Écris un script TikTok ultra immerssif de ~150-170 mots. Thème : horreur atmosphérique. Style concis, phrases courtes, sans grossièretés.'
  # Chemins standards
  MANIFEST_FILE: "manifests/horreur.txt"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      # Dropbox (mode refresh token recommandé) — facultatif mais supporté
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
      # Fallback éventuel si tu le gardes encore :
      DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install --no-cache-dir -r requirements.txt
          fi

      - name: Prepare folders
        run: |
          set -euo pipefail
          mkdir -p story audio selected_media subs final_video tmp

      # ---------- 1) Script (OpenAI) ----------
      - name: Generate story
        run: |
          set -euo pipefail
          python scripts/generate_story.py \
            --system "${SYSTEM_PROMPT}" \
            --user "${USER_PROMPT}" \
            --out "story/story.txt"
          test -s "story/story.txt"

      # ---------- 2) Voix (ElevenLabs) ----------
      - name: Synthesize voice
        run: |
          set -euo pipefail
          : "${ELEVENLABS_API_KEY:?ELEVENLABS_API_KEY manquant}"
          : "${ELEVENLABS_VOICE_ID:?ELEVENLABS_VOICE_ID manquant}"
          python scripts/voice_elevenlabs.py \
            --text "story/story.txt" \
            --voice-id "${ELEVENLABS_VOICE_ID}" \
            --out "audio/voice.wav"
          test -s "audio/voice.wav"

      # ---------- 3) Sous-titres (WhisperX -> SRT) ----------
      - name: Build SRT subtitles (WhisperX forced-align)
        run: |
          set -euo pipefail
          python scripts/whisperx_subs.py \
            --audio "audio/voice.wav" \
            --transcript "story/story.txt" \
            --out "subs/subtitles.srt"
          test -s "subs/subtitles.srt"

      # ---------- 4) Select & Merge (aligne la vidéo sur la durée audio) ----------
      - name: Select and merge background clips
        run: |
          set -euo pipefail
          : "${MANIFEST_FILE:?MANIFEST_FILE manquant}"
          test -s "${MANIFEST_FILE}"
          python scripts/select_and_merge.py \
            --manifest "${MANIFEST_FILE}" \
            --audio "audio/voice.wav" \
            --out "selected_media/merged.mp4"
          test -s "selected_media/merged.mp4"

      # ---------- 5) Render final (SRT ou ASS – Option A) ----------
      - name: Render final (video + audio + SRT/ASS)
        run: |
          set -euo pipefail
          python scripts/render_final.py \
            --video "selected_media/merged.mp4" \
            --audio "audio/voice.wav" \
            --subs "subs/subtitles.srt" \
            --output "final_video/${OUT_NAME}"
          test -s "final_video/${OUT_NAME}"

      # ---------- 6) Artifact ----------
      - name: Upload artifact (final_video)
        uses: actions/upload-artifact@v4
        with:
          name: final_video
          path: final_video/

      # ---------- 7) Dropbox (optionnel) ----------
      - name: Upload to Dropbox (refresh-token preferred)
        if: ${{ (env.DROPBOX_APP_KEY != '' && env.DROPBOX_APP_SECRET != '' && env.DROPBOX_REFRESH_TOKEN != '') || (env.DROPBOX_ACCESS_TOKEN != '') }}
        run: |
          set -euo pipefail
          python scripts/dropbox_upload.py \
            --file "final_video/${OUT_NAME}" \
            --remote-dir "/horror" \
            --out-link "final_video/dropbox_link.txt"
          if [ -s "final_video/dropbox_link.txt" ]; then
            echo "Dropbox link:"
            cat final_video/dropbox_link.txt
          fi

      - name: Upload artifact (dropbox link)
        if: ${{ always() && hashFiles('final_video/dropbox_link.txt') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: dropbox_link
          path: final_video/dropbox_link.txt
