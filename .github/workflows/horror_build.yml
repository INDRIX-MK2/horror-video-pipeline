name: Horror TikTok Builder

on:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * *" # chaque jour à 08:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      MANIFEST_URL: ${{ secrets.MANIFEST_URL }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      OUT_NAME: final_horror.mp4
      CLIPS_COUNT: "13"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq curl fonts-dejavu-core

      - name: Preflight secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=0
          for v in OPENAI_API_KEY ELEVENLABS_API_KEY ELEVENLABS_VOICE_ID MANIFEST_URL DISCORD_WEBHOOK_URL; do
            if [ -z "${!v:-}" ]; then
              echo "$v manquant"
              missing=1
            fi
          done
          [ "$missing" -eq 0 ]

      - name: Make directories
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p selected_media audio story subtitles final_video

      - name: Generate story with OpenAI
        shell: bash
        run: |
          set -euo pipefail
          SYS="Tu écris un script court et immersif d'horreur en français."
          USER="Écris un script TikTok de 180 à 200 mots (65-75s). Structure : hook (10s), développement (45s), conclusion avec CTA (10s). Thème : horreur atmosphérique, manoir, pluie, bruits métalliques. Style concis, phrases courtes, sans grossièretés."
          jq -n --arg sys "$SYS" --arg user "$USER" \
            '{model:"gpt-4o-mini",temperature:1,messages:[{role:"system",content:$sys},{role:"user",content:$user}]}' \
            > story/payload.json
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -d @story/payload.json \
          | jq -r '.choices[0].message.content' > story/story.txt
          # Nettoie les lignes vides éventuelles
          awk 'NF' story/story.txt > story/.t && mv story/.t story/story.txt

      - name: Fetch manifest and re-encode segments (1080x1920/30fps)
        shell: bash
        run: |
          set -euo pipefail
          rm -f selected_media/list.txt
          curl -fsSL "$MANIFEST_URL" -o selected_media/manifest.txt
          i=0
          while IFS= read -r url; do
            [ -z "$url" ] && continue
            i=$((i+1))
            SRC="selected_media/src_${i}.mp4"
            SEG="selected_media/seg_${i}.mp4"
            curl -fsSL -L "$url" -o "$SRC"
            ffmpeg -nostdin -y -i "$SRC" \
              -vf "scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2,setsar=1" \
              -r 30 -c:v libx264 -crf 18 -pix_fmt yuv420p -an "$SEG"
            printf "%s\n" "file '$(pwd)/$SEG'" >> selected_media/list.txt
          done < selected_media/manifest.txt
          ffmpeg -nostdin -y -f concat -safe 0 -i selected_media/list.txt -c copy selected_media/temp_merge.mp4

      - name: TTS voiceover (ElevenLabs)
        shell: bash
        run: |
          set -euo pipefail
          jq -Rs '{text: ., model_id:"eleven_multilingual_v2", voice_settings:{stability:0.4, similarity_boost:0.7, style:0.2, use_speaker_boost:true}}' \
            < story/story.txt > audio/tts_payload.json
          curl -sS -X POST "https://api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}" \
            -H "xi-api-key: ${ELEVENLABS_API_KEY}" \
            -H "Content-Type: application/json" \
            --data-binary @audio/tts_payload.json \
            --output audio/voice.mp3

      - name: Build karaoke subtitles (ASS)
        shell: bash
        run: |
          set -euo pipefail
          DUR="$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 audio/voice.mp3)"
          : > subtitles/captions.ass
          printf '%s\n' '[Script Info]' >> subtitles/captions.ass
          printf '%s\n' 'ScriptType: v4.00+' >> subtitles/captions.ass
          printf '%s\n' 'PlayResX: 1080' >> subtitles/captions.ass
          printf '%s\n' 'PlayResY: 1920' >> subtitles/captions.ass
          printf '%s\n' 'ScaledBorderAndShadow: yes' >> subtitles/captions.ass
          printf '%s\n' '' >> subtitles/captions.ass
          printf '%s\n' '[V4+ Styles]' >> subtitles/captions.ass
          printf '%s\n' 'Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding' >> subtitles/captions.ass
          printf '%s\n' 'Style: TikTok,DejaVu Sans,52,&H00FFFFFF,&H000000FF,&H00111111,&H80000000,0,0,0,0,100,100,0,0,1,3.5,1.5,2,90,90,120,1' >> subtitles/captions.ass
          printf '%s\n' '' >> subtitles/captions.ass
          printf '%s\n' '[Events]' >> subtitles/captions.ass
          printf '%s\n' 'Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text' >> subtitles/captions.ass
          # Génération des lignes à partir du texte + durée audio, avec tags {\k..} par mot
          awk -v dur="$DUR" '
          function fmt(t,  h,m,s,cs) {
            if (t<0) t=0;
            h=int(t/3600); m=int((t%3600)/60); s=int(t%60); cs=int((t-int(t))*100);
            return sprintf("%d:%02d:%02d.%02d",h,m,s,cs);
          }
          BEGIN{ minline=2.6; maxw=8; }
          { if (NR==1) txt=$0; else txt=txt " " $0; }
          END{
            n=split(txt, w, /[[:space:]]+/);
            if (n<1) exit;
            pw=dur/n; if (pw<0.18) pw=0.18;
            t=0; acc=0; cnt=0; line="";
            for (i=1;i<=n;i++){
              k=int(pw*100+0.5);
              if (line=="") { line="{\\k"k"}" w[i]; } else { line=line " {\\k"k"}" w[i]; }
              acc+=pw; cnt++;
              if (acc>=minline || cnt>=maxw || i==n){
                start=t; end=t+acc; if (end>dur) end=dur;
                printf("Dialogue: 0,%s,%s,TikTok,,0,0,0,,%s\n", fmt(start), fmt(end), line);
                t=end; acc=0; cnt=0; line="";
              }
            }
          }' story/story.txt >> subtitles/captions.ass

      - name: Upload intermediates
        uses: actions/upload-artifact@v4
        with:
          name: intermediates
          path: |
            selected_media/
            story/
            audio/
            subtitles/

      - name: Apply effects, burn subtitles, and mux audio
        shell: bash
        run: |
          set -euo pipefail
          vf="chromashift=cbh=2:crh=-2,vignette=PI/5,noise=alls=12:allf=t+u,hue=s=0.9,eq=contrast=1.06:brightness=0.02,subtitles=subtitles/captions.ass:fontsdir=."
          ffmpeg -nostdin -y \
            -i selected_media/temp_merge.mp4 \
            -i audio/voice.mp3 \
            -filter_complex "[0:v]${vf}[v]" -map "[v]" -map 1:a \
            -r 30 -c:v libx264 -preset medium -crf 18 -pix_fmt yuv420p \
            -c:a aac -b:a 192k -shortest \
            "final_video/${OUT_NAME}"

      - name: Upload final video
        uses: actions/upload-artifact@v4
        with:
          name: final_video
          path: final_video/

      - name: Publish to Discord
        if: ${{ env.DISCORD_WEBHOOK_URL != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X POST \
            -F "content=🎬 Nouvelle vidéo horreur prête : ${OUT_NAME}" \
            -F "file1=@final_video/${OUT_NAME}" \
            "$DISCORD_WEBHOOK_URL"
