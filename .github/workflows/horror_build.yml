name: Horror TikTok Builder (no-heredoc)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      MANIFEST_URL: ${{ secrets.MANIFEST_URL }}
      # --- Dropbox via refresh token (tes secrets existants) ---
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps (ffmpeg)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check required secrets
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY manquant"; exit 1; }
          [ -n "${ELEVENLABS_API_KEY:-}" ] || { echo "ELEVENLABS_API_KEY manquant"; exit 1; }
          [ -n "${ELEVENLABS_VOICE_ID:-}" ] || { echo "ELEVENLABS_VOICE_ID manquant"; exit 1; }
          [ -n "${MANIFEST_URL:-}" ] || { echo "MANIFEST_URL manquant"; exit 1; }
          # Dropbox (refresh token) — si absent, on sautera juste l'étape upload
          if [ -z "${DROPBOX_APP_KEY:-}" ] || [ -z "${DROPBOX_APP_SECRET:-}" ] || [ -z "${DROPBOX_REFRESH_TOKEN:-}" ]; then
            echo "⚠️  Secrets Dropbox incomplets — l'étape Dropbox sera ignorée."
            echo "DROPBOX_OK=0" >> $GITHUB_ENV
          else
            echo "DROPBOX_OK=1" >> $GITHUB_ENV
          fi

      - name: Generate story (GPT)
        run: |
          set -euo pipefail
          mkdir -p story
          python scripts/generate_story.py
          test -s story/story.txt || { echo "story/story.txt manquant/vide"; exit 1; }
          test -s story/title.txt || { echo "story/title.txt manquant/vide"; exit 1; }

      - name: Synthesize voice (ElevenLabs)
        run: |
          set -euo pipefail
          mkdir -p audio
          python scripts/voice_elevenlabs.py --transcript story/story.txt --out audio/voice.wav
          test -s audio/voice.wav || { echo "audio/voice.wav manquant/vide"; exit 1; }

      - name: Select & merge clips (match audio length)
        run: |
          set -euo pipefail
          mkdir -p selected_media
          python scripts/select_and_merge.py \
            --manifest manifests/horreur.txt \
            --audio audio/voice.wav \
            --out selected_media/merged.mp4
          test -s selected_media/merged.mp4 || { echo "selected_media/merged.mp4 manquant/vide"; exit 1; }

      - name: Build ASS subtitles
        run: |
          set -euo pipefail
          mkdir -p subs
          python scripts/build_ass.py \
            --transcript story/story.txt \
            --audio audio/voice.wav \
            --out subs/captions.ass \
            --max-words 4 \
            --max-lines 2 \
            --align 5 \
            --size 60 \
            --colour "&H00FFFF00" \
            --outline-colour "&H00000000" \
            --outline 3 \
            --shadow 2 \
            --marginv 200
          test -s subs/captions.ass || { echo "subs/captions.ass manquant/vide"; exit 1; }
          grep -i '^Dialogue:' subs/captions.ass >/dev/null || { echo "Aucun Dialogue: dans subs/captions.ass"; exit 2; }

      - name: Render final video (effects + subtitles, cut to audio)
        run: |
          set -euo pipefail
          mkdir -p final_video
          python scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --subs subs/captions.ass \
            --output "final_video/${OUT_NAME}"
          test -s "final_video/${OUT_NAME}" || { echo "final_video/${OUT_NAME} manquant/vide"; exit 1; }

      - name: Upload artifacts (final + subs)
        uses: actions/upload-artifact@v4
        with:
          name: final_outputs
          path: |
            final_video/
            subs/captions.ass

      - name: Upload to Dropbox (refresh-token)
        if: env.DROPBOX_OK == '1'
        run: |
          set -euo pipefail
          python scripts/dropbox_upload.py --file "final_video/${OUT_NAME}" || {
            echo "❌ Échec Dropbox (refresh token) — vérifier clés/permissions"; exit 1;
          }
        env:
          DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
          DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
