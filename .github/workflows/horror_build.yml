name: Horror TikTok Builder (title+story+cta, no-heredoc)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      MANIFEST_URL: ${{ secrets.MANIFEST_URL }}
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps (ffmpeg)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check required secrets
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY manquant"; exit 1; }
          [ -n "${ELEVENLABS_API_KEY:-}" ] || { echo "ELEVENLABS_API_KEY manquant"; exit 1; }
          [ -n "${ELEVENLABS_VOICE_ID:-}" ] || { echo "ELEVENLABS_VOICE_ID manquant"; exit 1; }
          [ -n "${MANIFEST_URL:-}" ] || { echo "MANIFEST_URL manquant"; exit 1; }
          if [ -z "${DROPBOX_APP_KEY:-}" ] || [ -z "${DROPBOX_APP_SECRET:-}" ] || [ -z "${DROPBOX_REFRESH_TOKEN:-}" ]; then
            echo "DROPBOX_OK=0" >> $GITHUB_ENV
          else
            echo "DROPBOX_OK=1" >> $GITHUB_ENV
          fi

      - name: Generate story (title + story + cta)
        run: |
          set -euo pipefail
          mkdir -p story
          python scripts/generate_story.py
          test -s story/title.txt || { echo "title.txt manquant"; exit 1; }
          test -s story/story.txt || { echo "story.txt manquant"; exit 1; }
          test -s story/cta.txt   || { echo "cta.txt manquant"; exit 1; }

      - name: Synthesize voice (title + gap + story + gap + cta)
        run: |
          set -euo pipefail
          mkdir -p audio
          python scripts/voice_elevenlabs.py \
            --title story/title.txt \
            --transcript story/story.txt \
            --cta story/cta.txt \
            --gap 1.0 \
            --out audio/voice.wav
          test -s audio/voice.wav || { echo "voice.wav manquant"; exit 1; }
          test -s audio/title.wav || { echo "title.wav manquant"; exit 1; }
          test -s audio/story.wav || { echo "story.wav manquant"; exit 1; }
          test -s audio/cta.wav   || { echo "cta.wav manquant"; exit 1; }

      - name: Select & merge clips (match audio length)
        run: |
          set -euo pipefail
          mkdir -p selected_media
          python scripts/select_and_merge.py \
            --manifest manifests/horreur.txt \
            --audio audio/voice.wav \
            --out selected_media/merged.mp4
          test -s selected_media/merged.mp4 || { echo "merged.mp4 manquant"; exit 1; }

      - name: Build ASS (title centered yellow + story + cta centered yellow)
        run: |
          set -euo pipefail
          mkdir -p subs
          python scripts/build_ass.py \
            --transcript story/story.txt \
            --audio audio/voice.wav \
            --story-audio audio/story.wav \
            --title-text story/title.txt \
            --title-audio audio/title.wav \
            --title-gap-after 1.0 \
            --cta-text story/cta.txt \
            --cta-audio audio/cta.wav \
            --gap-before-cta 1.0 \
            --out subs/captions.ass \
            --font "Arial" \
            --size 60 \
            --colour "&H00FFFFFF" \
            --outline-colour "&H00000000" \
            --back-colour "&H64000000" \
            --outline 3 --shadow 2 --align 5 --marginv 200 \
            --max-words 4 --max-lines 2 \
            --title-size 84 --title-colour "&H00FFFF00" --title-align 5 --title-marginv 700 --title-max-words 4 \
            --cta-size 72 --cta-colour "&H00FFFF00" --cta-align 5 --cta-marginv 700 --cta-max-words 4
          grep -q '^Dialogue:' subs/captions.ass || { echo "ASS vide"; exit 2; }

      - name: Render final (effects + ASS, cut to audio)
        run: |
          set -euo pipefail
          mkdir -p final_video
          python scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --subs subs/captions.ass \
            --output "final_video/${OUT_NAME}"
          test -s "final_video/${OUT_NAME}" || { echo "final absent"; exit 1; }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: final_outputs
          path: |
            final_video/
            subs/captions.ass
            audio/timeline.json

      - name: Upload to Dropbox (refresh token)
        if: env.DROPBOX_OK == '1'
        run: |
          set -euo pipefail
          python scripts/dropbox_upload.py --file "final_video/${OUT_NAME}"
