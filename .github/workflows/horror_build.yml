name: Horror TikTok Builder (no-heredoc, full pipeline)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: "final_horror.mp4"
  SYSTEM_PROMPT: "Tu écris un script court et immersif d'horreur en français. N'inclus AUCUNE didascalie (intro, scène, narrateur, CTA, etc.). Raconte seulement l'histoire."
  USER_PROMPT: "Écris un script TikTok immerssif de 180 à 200 mots (65-75s). Thème : horreur atmosphérique. Style concis, phrases courtes, sans grossièretés."
  MANIFEST_FILE: "manifests/horreur.txt"   # URLs (Dropbox dl=1), une par ligne.

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}           # 1 voix
      # Pour 2 voix, commente la ligne ci-dessus et décommente celles-ci :
      # ELEVENLABS_VOICE_ID_V1: ${{ secrets.ELEVENLABS_VOICE_ID_V1 }}   # Voix 1
      # ELEVENLABS_VOICE_ID_V2: ${{ secrets.ELEVENLABS_VOICE_ID_V2 }}   # Voix 2

      # Dropbox (mode refresh recommandé, fallback access token)
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
      DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python + ffmpeg
        shell: bash
        run: |
          set -euo pipefail
          python3 --version
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg jq

      - name: Sanity check secrets & inputs
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY manquant"; exit 1; }
          [ -n "${ELEVENLABS_API_KEY:-}" ] || { echo "ELEVENLABS_API_KEY manquant"; exit 1; }
          if [ -z "${ELEVENLABS_VOICE_ID:-}" ] && { [ -z "${ELEVENLABS_VOICE_ID_V1:-}" ] || [ -z "${ELEVENLABS_VOICE_ID_V2:-}" ]; }; then
            echo "Configure ELEVENLABS_VOICE_ID (1 voix) OU ELEVENLABS_VOICE_ID_V1+V2 (2 voix)"; exit 1;
          fi
          [ -s "${MANIFEST_FILE}" ] || { echo "Manifest URLs introuvable ou vide: ${MANIFEST_FILE}"; exit 1; }

      - name: Generate story (story/story.txt)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p story
          python3 scripts/generate_story.py
          [ -s story/story.txt ] || { echo "story/story.txt vide"; exit 1; }
          echo "---- STORY (aperçu) ----"
          nl -ba story/story.txt | sed -n '1,80p'

      - name: ElevenLabs TTS -> audio/voice.wav + audio/dialogue_cues.json
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p audio
          python3 scripts/voice_elevenlabs.py \
            --transcript story/story.txt \
            --out audio/voice.wav \
            --cues audio/dialogue_cues.json
          [ -s audio/voice.wav ] || { echo "audio/voice.wav introuvable"; exit 1; }
          [ -s audio/dialogue_cues.json ] || { echo "audio/dialogue_cues.json introuvable"; exit 1; }

      - name: Build ASS subtitles (subs/captions.ass) basé sur durée audio (Option A)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p subs
          python3 scripts/build_ass.py \
            --transcript story/story.txt \
            --audio audio/voice.wav \
            --out subs/captions.ass
          [ -s subs/captions.ass ] || { echo "subs/captions.ass introuvable"; exit 1; }

      - name: Select clips & merge (en fonction de la durée audio)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p selected_media
          python3 scripts/select_and_merge.py \
            --manifest "${MANIFEST_FILE}" \
            --audio audio/voice.wav \
            --out selected_media/merged.mp4
          [ -s selected_media/merged.mp4 ] || { echo "merged.mp4 introuvable"; exit 1; }

      - name: Render final (superposition sous-titres) -> final_video/${OUT_NAME}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p final_video
          python3 scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --ass subs/captions.ass \
            --output "final_video/${OUT_NAME}"
          [ -s "final_video/${OUT_NAME}" ] || { echo "final_video manquant"; exit 1; }

      - name: Upload to Dropbox (stable refresh token si dispo)
        shell: bash
        run: |
          set -euo pipefail
          python3 scripts/dropbox_upload.py \
            --file "final_video/${OUT_NAME}" \
            --remote-dir "/horror" \
            --out-link "final_video/dropbox_link.txt"
          [ -s final_video/dropbox_link.txt ] || { echo "dropbox_link.txt manquant"; exit 1; }
          echo "Dropbox link: $(cat final_video/dropbox_link.txt)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: final-assets
          path: |
            story/story.txt
            audio/voice.wav
            audio/dialogue_cues.json
            subs/captions.ass
            selected_media/merged.mp4
            final_video/${{ env.OUT_NAME }}
            final_video/dropbox_link.txt