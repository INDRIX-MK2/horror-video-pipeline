name: Horror TikTok Builder (no-heredoc, title-first + CTA)

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  OUT_NAME: final_horror.mp4
  MANIFEST_FILE: manifests/horreur.txt

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      ELEVENLABS_VOICE_ID: ${{ secrets.ELEVENLABS_VOICE_ID }}
      DROPBOX_APP_KEY: ${{ secrets.DROPBOX_APP_KEY }}
      DROPBOX_APP_SECRET: ${{ secrets.DROPBOX_APP_SECRET }}
      DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---------- Story + Title + CTA ----------
      - name: Generate story + title
        run: |
          set -euo pipefail
          mkdir -p story
          python scripts/generate_story.py \
            --model gpt-4o \
            --temperature 1 \
            --system "Tu écris un script court et immersif d'horreur en français. N'inclus AUCUNE didascalie (intro, scène, narrateur, CTA, etc.). Raconte seulement l'histoire." \
            --user "Écris une histoire TikTok immersive (≈180-200 mots). Thème : horreur atmosphérique, manoir, pluie, bruits métalliques. Style concis, phrases courtes." \
            --out story/story.txt \
            --title-out story/title.txt
          echo "Abonne-toi pour découvrir l’horreur qui se cache dans l’ombre." > story/cta.txt
          test -s story/story.txt
          test -s story/title.txt
          test -s story/cta.txt

      - name: TTS (title -> 2s gap -> story -> CTA)
        run: |
          set -euo pipefail
          mkdir -p audio
          python scripts/voice_elevenlabs.py \
            --transcript story/story.txt \
            --title story/title.txt \
            --cta story/cta.txt \
            --gap 2.0 \
            --out audio/voice.wav
          test -s audio/voice.wav
          test -s audio/timeline.json || (echo "timeline.json manquant" && exit 1)

      # ---------- Clips ----------
      - name: Select & merge clips from manifest
        run: |
          set -euo pipefail
          mkdir -p selected_media
          test -s "${MANIFEST_FILE}"
          python scripts/select_and_merge.py \
            --manifest "${MANIFEST_FILE}" \
            --audio audio/voice.wav \
            --out selected_media/merged.mp4
          test -s selected_media/merged.mp4

      # ---------- Subtitles (ASS) ----------
      - name: Build ASS subtitles (offset by title+gap)
        run: |
          set -euo pipefail
          mkdir -p subs
          python scripts/build_ass.py \
            --transcript story/story.txt \
            --audio audio/voice.wav \
            --timeline audio/timeline.json \
            --out subs/captions.ass
          test -s subs/captions.ass

      # ---------- Render final ----------
      - name: Render final (overlays title & CTA)
        run: |
          set -euo pipefail
          mkdir -p final_video
          python scripts/render_final.py \
            --video selected_media/merged.mp4 \
            --audio audio/voice.wav \
            --subs subs/captions.ass \
            --title-file story/title.txt \
            --cta-file story/cta.txt \
            --timeline audio/timeline.json \
            --output "final_video/${OUT_NAME}"
          test -s "final_video/${OUT_NAME}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_outputs
          path: |
            story/
            audio/
            subs/
            selected_media/
            final_video/

      # ---------- Dropbox ----------
      - name: Upload to Dropbox
        run: |
          set -euo pipefail
          : "${DROPBOX_APP_KEY:?missing}"
          : "${DROPBOX_APP_SECRET:?missing}"
          : "${DROPBOX_REFRESH_TOKEN:?missing}"
          python scripts/dropbox_upload.py \
            --file "final_video/${OUT_NAME}" \
            --remote-dir "/horror" \
            --out-link final_video/dropbox_link.txt
          test -s final_video/dropbox_link.txt || true