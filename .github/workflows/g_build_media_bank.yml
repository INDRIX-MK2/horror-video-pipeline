name: g_build_mediabank

on:
  workflow_dispatch:
    inputs:
      theme:
        description: "Thème(s), séparés par des virgules (ex: horror,shadow,night)"
        required: false
        default: "horror"
      max_images:
        description: "Nombre d'images à récupérer (total)"
        required: false
        default: "100"
      max_videos:
        description: "Nombre de mini-clips à récupérer (total)"
        required: false
        default: "100"
      providers:
        description: "Sources (pexels,pixabay)"
        required: false
        default: "pexels,pixabay"

jobs:
  build_mediabank:
    runs-on: ubuntu-latest
    env:
      THEME: ${{ github.event.inputs.theme }}
      MAX_IMAGES: ${{ github.event.inputs.max_images }}
      MAX_VIDEOS: ${{ github.event.inputs.max_videos }}
      PROVIDERS: ${{ github.event.inputs.providers }}
      PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
      PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Préparer dossiers
        run: |
          set -euo pipefail
          mkdir -p media_bank/images media_bank/videos work
          printf "theme=%s\n" "${THEME}" > work/params.txt
          printf "providers=%s\n" "${PROVIDERS}" >> work/params.txt
          printf "max_images=%s\n" "${MAX_IMAGES}" >> work/params.txt
          printf "max_videos=%s\n" "${MAX_VIDEOS}" >> work/params.txt

      - name: Installer jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Télécharger images (Pexels)
        if: contains(env.PROVIDERS, 'pexels')
        env:
          KEY: ${{ env.PEXELS_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${KEY:-}" ]; then echo "Clé Pexels absente, skip."; exit 0; fi
          THEMES=$(echo "$THEME" | tr ',' ' ')
          COUNT=0
          for kw in $THEMES; do
            [ $COUNT -ge "$MAX_IMAGES" ] && break
            for page in 1 2 3 4 5; do
              [ $COUNT -ge "$MAX_IMAGES" ] && break
              url="https://api.pexels.com/v1/search?query=${kw}&per_page=20&page=${page}"
              json=$(curl -fsSL -H "Authorization: $KEY" "$url" || true)
              echo "$json" | jq -r '.photos[].src.original' | while read -r u; do
                [ $COUNT -ge "$MAX_IMAGES" ] && break
                [ -n "$u" ] || continue
                fn="media_bank/images/pexels_${kw}_${COUNT}.jpg"
                curl -fsSL "$u" -o "$fn" || true
                if [ -s "$fn" ]; then COUNT=$((COUNT+1)); fi
              done
            done
          done
          echo "Total images Pexels: $COUNT"

      - name: Télécharger images (Pixabay)
        if: contains(env.PROVIDERS, 'pixabay')
        env:
          KEY: ${{ env.PIXABAY_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${KEY:-}" ]; then echo "Clé Pixabay absente, skip."; exit 0; fi
          THEMES=$(echo "$THEME" | tr ',' ' ')
          CUR=$(ls -1 media_bank/images 2>/dev/null | wc -l || true)
          REM=$(( MAX_IMAGES - CUR ))
          [ $REM -le 0 ] && { echo "Quota images atteint: $CUR"; exit 0; }
          for kw in $THEMES; do
            [ $REM -le 0 ] && break
            for page in 1 2 3 4 5; do
              [ $REM -le 0 ] && break
              url="https://pixabay.com/api/?key=${KEY}&q=${kw}&image_type=photo&per_page=20&page=${page}"
              json=$(curl -fsSL "$url" || true)
              echo "$json" | jq -r '.hits[].largeImageURL' | while read -r u; do
                [ $REM -le 0 ] && break
                [ -n "$u" ] || continue
                idx=$(ls -1 media_bank/images 2>/dev/null | wc -l || true)
                fn="media_bank/images/pixabay_${kw}_${idx}.jpg"
                curl -fsSL "$u" -o "$fn" || true
                if [ -s "$fn" ]; then REM=$((REM-1)); fi
              done
            done
          done
          echo "Total images: $(ls -1 media_bank/images 2>/dev/null | wc -l || true)"

      - name: Télécharger vidéos (Pexels)
        if: contains(env.PROVIDERS, 'pexels')
        env:
          KEY: ${{ env.PEXELS_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${KEY:-}" ]; then echo "Clé Pexels absente (vidéos), skip."; exit 0; fi
          THEMES=$(echo "$THEME" | tr ',' ' ')
          COUNT=0
          for kw in $THEMES; do
            [ $COUNT -ge "$MAX_VIDEOS" ] && break
            for page in 1 2 3 4 5; do
              [ $COUNT -ge "$MAX_VIDEOS" ] && break
              url="https://api.pexels.com/videos/search?query=${kw}&per_page=15&page=${page}"
              json=$(curl -fsSL -H "Authorization: $KEY" "$url" || true)
              echo "$json" | jq -r '.videos[].video_files[0].link' | while read -r u; do
                [ $COUNT -ge "$MAX_VIDEOS" ] && break
                [ -n "$u" ] || continue
                fn="media_bank/videos/pexels_${kw}_${COUNT}.mp4"
                curl -fsSL "$u" -o "$fn" || true
                if [ -s "$fn" ]; then COUNT=$((COUNT+1)); fi
              done
            done
          done
          echo "Total vidéos Pexels: $COUNT"

      - name: Uploader artefact media_bank
        uses: actions/upload-artifact@v4
        with:
          name: media_bank
          path: media_bank
          if-no-files-found: error