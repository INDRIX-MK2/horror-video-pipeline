name: Generate story JSON

on:
  workflow_call:
    inputs:
      topic:
        required: true
        type: string
      locale:
        required: true
        type: string
        default: fr-FR
    outputs:
      title:
        description: "Titre court"
        value: ${{ jobs.make.outputs.title }}
      script:
        description: "Script voix off"
        value: ${{ jobs.make.outputs.script }}
      captions:
        description: "Captions concaténées (une par ligne)"
        value: ${{ jobs.make.outputs.captions }}
      hashtags:
        description: "Hashtags concaténés (un par ligne)"
        value: ${{ jobs.make.outputs.hashtags }}

jobs:
  make:
    runs-on: ubuntu-latest
    outputs:
      title: ${{ steps.expose.outputs.title }}
      script: ${{ steps.expose.outputs.script }}
      captions: ${{ steps.expose.outputs.captions }}
      hashtags: ${{ steps.expose.outputs.hashtags }}
    steps:
      - name: Build user instruction (compact, sans heredoc)
        shell: bash
        run: |
          set -Eeuo pipefail
          printf "%s\n" \
            "Rédige une narration d'horreur immersive en ${{
              inputs.locale
            }} inspirée par le sujet: «${{ inputs.topic }}»." \
            "" \
            "Exigences:" \
            "1) Structure : intro → tension → climax → résolution." \
            "2) Durée orale : 65 à 180 secondes (style naturel, fluide)." \
            "3) Captions : 18 à 24 phrases, 55–95 caractères chacune." \
            "4) Hashtags : 6 à 10 éléments commençant par #." \
            "" \
            "Renvoie STRICTEMENT ce JSON :" \
            "{ \"title\": \"string\", \"script\": \"string\", \"captions\": [\"string\", ...], \"hashtags\": [\"#string\", ...] }" \
            > user.txt

      - name: Call OpenAI (JSON mode)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -Eeuo pipefail
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg u "$(cat user.txt)" \
                    '{model:"gpt-4o-mini",
                      response_format:{type:"json_object"},
                      messages:[{role:"system",content:"Tu renvoies uniquement un JSON valide."},
                                {role:"user",content:$u}] }')" \
            > response.json

          # Normaliser / valider
          jq '
            .choices[0].message.content
            | fromjson
            | {
                title:    (.title // "" | tostring),
                script:   (.script // "" | tostring),
                captions: ((.captions // []) | map(tostring) | map(. | gsub("\\s+";" ") | .[:120]) | .[:24]),
                hashtags: ((.hashtags // []) | map(tostring) | map( if startswith("#") then . else "#"+. end ) | .[:10])
              }
          ' response.json > story.json

          jq -r '.title' story.json > title.txt
          jq -r '.script' story.json > script.txt
          jq -r '.captions[]' story.json > captions.txt
          jq -r '.hashtags[]' story.json > hashtags.txt

      - name: Expose outputs
        id: expose
        shell: bash
        run: |
          {
            echo 'title<<EOF'
            cat title.txt
            echo 'EOF'
            echo 'script<<EOF'
            cat script.txt
            echo 'EOF'
            echo 'captions<<EOF'
            cat captions.txt
            echo 'EOF'
            echo 'hashtags<<EOF'
            cat hashtags.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Upload story artifact
        uses: actions/upload-artifact@v4
        with:
          name: story-output
          path: |
            story.json
            response.json
            title.txt
            script.txt
            captions.txt
            hashtags.txt
          retention-days: 7